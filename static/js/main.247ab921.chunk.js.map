{"version":3,"sources":["components/PickerDateAndPlace.js","util/util.js","components/RailTable.js","middleware/API.js","middleware/reduxAPI.js","containers/App.js","serviceWorker.js","index.js"],"names":["PickerDateAndPlace","date","stations","originStation","destinationStation","handleInputChange","swapLocation","optionOriginStations","optionDestinationStations","forEach","station","push","key","stationID","value","stationName","zhTw","className","name","id","type","min","moment","format","max","add","onChange","onClick","defaultProps","validateData","reduxStatus","data","status","result","minutesOfDay","m","minutes","hours","getItemsWithTravelTimes","times","originalItems","finalData","travelTimeDSC","active","finalItems","map","availableSeat","departureTime","trainNo","arrivalTime","destinationStationName","travelTime","destinationInfo","length","nowInfo","filter","item","dailyTrainInfo","destinationStopTime","getDestinationInfo","start","end","utc","diff","getTravelTime","sort","b","a","RailTable","Component","constructor","props","super","this","state","sortActiveMode","departureTimeDSC","toggleSortDepartureTime","setState","toggleSortTravelTime","render","prices","isLoading","isSubmit","availableSeats","blockTableRows","colSpan","style","textAlign","unix","getItemsWithDepartureTimeAfterNow","stopStations","indexItem","findIndex","stopStation","hasStandardSeat","standardSeatStatus","businessSeatStatus","getItemsWithAvailableSeats","price","fares","fare","ticketType","toString","isModalOpen","API","axios","create","baseURL","timeout","responseType","paramsSerializer","params","qs","stringify","indices","interceptors","response","use","parseError","messages","parseBody","camelizeKeys","error","console","warn","Swal","title","showConfirmButton","showCloseButton","onClose","Array","Promise","reject","reduxApi","url","options","headers","err","log","getState","adapterFetch","fetch","App","updateTime","bind","submit","componentDidMount","dispatch","reduxAPI","actions","sync","validatedStations","event","target","checked","preventDefault","swal","timer","all","get","then","spread","res","finalState","JSON","parse","connect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reducer","combineReducers","reducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6TAKA,SAASA,GAAmB,KAC1BC,EAD0B,SAE1BC,EAF0B,cAG1BC,EAH0B,mBAI1BC,EAJ0B,kBAK1BC,EAL0B,aAM1BC,IAEA,MAAMC,EAAuB,GACvBC,EAA4B,GAelC,OAdIN,GACFA,EAASO,QAAQC,IACfH,EAAqBI,KACnB,4BAAQC,IAAG,uBAAkBF,EAAQG,WAAaC,MAAOJ,EAAQG,WAC9DH,EAAQK,YAAYC,OAGzBR,EAA0BG,KACxB,4BAAQC,IAAG,4BAAuBF,EAAQG,WAAaC,MAAOJ,EAAQG,WACnEH,EAAQK,YAAYC,SAM3B,yBAAKC,UAAU,WACb,yBAAKA,UAAU,cACb,+CACA,2BACEC,KAAK,OACLC,GAAG,OACHC,KAAK,OACLC,IAAKC,MAASC,OAAO,cACrBC,IAAKF,MACFG,IAAI,EAAG,SACPF,OAAO,cACVT,MAAOb,EACPyB,SAAUrB,KAGd,yBAAKY,UAAU,cACb,+CACA,4BACEC,KAAK,gBACLC,GAAG,gBACHL,MAAOX,EACPuB,SAAUrB,GAETE,IAGL,yBAAKU,UAAU,cACb,4BAAQE,GAAG,eAAeC,KAAK,SAASH,UAAU,gBAAgBU,QAASrB,GACzE,0BAAMW,UAAU,+BAGpB,yBAAKA,UAAU,cACb,+CACA,4BACEC,KAAK,qBACLC,GAAG,qBACHL,MAAOV,EACPsB,SAAUrB,GAETG,KAYXR,EAAmB4B,aAAe,CAChCzB,cAAe,OACfC,mBAAoB,QAGPJ,QCpFf,SAAS6B,EAAaC,GACpB,OAAIA,GAAeA,EAAYC,KAAKC,QAAUF,EAAYC,KAAKE,OACtDH,EAAYC,KAAKE,OAEnB,EAGT,SAASC,EAAaC,GACpB,OAAOA,EAAEC,UAAwB,GAAZD,EAAEE,QA6DzB,SAASC,EAAwBP,GAAO,MAC9B9B,EAAiE8B,EAAjE9B,KAAMsC,EAA2DR,EAA3DQ,MAAkBC,EAAyCT,EAApDU,UAA0BC,EAA0BX,EAA1BW,cAAeC,EAAWZ,EAAXY,OACxDC,EAAaJ,EAChBK,IAAIC,IAAkB,MACbC,EAA2BD,EAA3BC,cAAeC,EAAYF,EAAZE,QACvB,IACIC,EACAC,EACAC,EAHAC,EAAkB,GAetB,OAXIb,GAASA,EAAMc,SACjBD,EA7BR,SAA4BJ,EAAST,GACnC,MAAMe,EAAUf,EAAMgB,OAAOC,GAAQA,EAAKC,eAAeT,UAAYA,GACrE,QAAIM,EAAQ,IACHA,EAAQ,GAAGI,oBA0BIC,CAAmBX,EAAST,GAC1Ca,IACFH,EAAcG,EAAgBH,YAC9BC,EAAyBE,EAAgBrC,YAAYC,OAIrD+B,GAAiBE,IACnBE,EA7BR,SAAuBlD,EAAM2D,EAAOC,GAQlC,OAPevC,IACZwC,IACCxC,IAAO,GAAD,OAAIrB,EAAJ,YAAY4D,GAAO,oBAAoBE,KAC3CzC,IAAO,GAAD,OAAIrB,EAAJ,YAAY2D,GAAS,yBAG9BrC,OAAO,SAsBSyC,CAAc/D,EAAM8C,EAAeE,IAE3C,2BACFH,GADL,IAEEI,yBACAD,cACAE,iBAGHI,OAAOC,GAAQA,EAAKP,aACvB,OAAIN,EACED,EACKE,EAAWqB,KAChB,CAACC,EAAGC,IACFjC,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYkE,EAAEhB,cACjCjB,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYiE,EAAEf,eAGhCP,EAAWqB,KAChB,CAACE,EAAGD,IACFhC,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYkE,EAAEhB,cACjCjB,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYiE,EAAEf,eAGhCP,ECxGT,MAAMwB,UAAkBC,YACtBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CACXC,eAAgB,EAChBC,kBAAkB,EAClBlC,eAAe,GAEjB+B,KAAKI,wBAA0B,KAAO,MAC5BD,EAAqBH,KAAKC,MAA1BE,iBACRH,KAAKK,SAAS,CACZF,kBAAmBA,EACnBD,eAAgB,KAGpBF,KAAKM,qBAAuB,KAAO,MACzBrC,EAAkB+B,KAAKC,MAAvBhC,cACR+B,KAAKK,SAAS,CACZpC,eAAgBA,EAChBiC,eAAgB,KAKtBK,SAAU,MAAD,EAUHP,KAAKF,MARPtE,EAFK,EAELA,KACAsC,EAHK,EAGLA,MACA0C,EAJK,EAILA,OACAC,EALK,EAKLA,UACAC,EANK,EAMLA,SAEA/E,EARK,EAQLA,mBACAgF,EATK,EASLA,eATK,EAWqDX,KAAKC,MAAzDE,EAXD,EAWCA,iBAAkBlC,EAXnB,EAWmBA,cAAeiC,EAXlC,EAWkCA,eACzC,IAAIU,EA2BJ,GAzBEA,EADEH,GAAaC,EAEb,wBAAIhE,GAAG,iBACL,wBAAImE,QAAQ,IAAIC,MAAO,CAAEC,UAAW,WAApC,wBAKMN,GAAaC,EAErB,wBAAIhE,GAAG,cACL,wBAAImE,QAAQ,IAAIC,MAAO,CAAEC,UAAW,WAApC,yCAOF,4BACE,wBAAIF,QAAQ,IAAIC,MAAO,CAAEC,UAAW,WAApC,6EAOFJ,GAAkBA,EAAe/B,SAAW6B,GAAaC,EAAU,CAErE,IAAI1C,EAAY2C,EAChB3C,ED9DN,SAA2CV,GAAO,MACxC9B,EAA6D8B,EAA7D9B,KAAiBuC,EAA4CT,EAAvDU,UAA0BmC,EAA6B7C,EAA7B6C,iBAAkBjC,EAAWZ,EAAXY,OACpDC,EAAaJ,EAAce,OAC/BC,GAAQlC,IAAO,GAAD,OAAIrB,EAAJ,YAAYuD,EAAKT,gBAAiB0C,OAASnE,MAASmE,QAEpE,OAAI9C,EACEiC,EACKhC,EAAWqB,KAChB,CAACE,EAAGD,IACFhC,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYkE,EAAEpB,iBACjCb,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYiE,EAAEnB,kBAGhCH,EAAWqB,KAChB,CAACC,EAAGC,IACFjC,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYkE,EAAEpB,iBACjCb,EAAaZ,IAAO,GAAD,OAAIrB,EAAJ,YAAYiE,EAAEnB,kBAGhCH,EC2CS8C,CAAkC,CAC5CzF,OACAwC,YACAmC,mBACAjC,OAA2B,IAAnBgC,IAGVlC,ED/CN,SAAoCrC,EAAoBoC,GACtD,OAAOA,EAAce,OAAOC,IAAS,MAC3BmC,EAAiBnC,EAAjBmC,aACFC,EAAYD,EAAaE,UAC7BC,GAAeA,EAAYjF,YAAcT,GAE3C,OAAIwF,GAAa,GACfpC,EAAKuC,gBAAiE,SAA/CJ,EAAaC,GAAWI,mBAEE,SAA/CL,EAAaC,GAAWI,oBACuB,SAA/CL,EAAaC,GAAWK,oBAGrB,KCkCOC,CAA2B9F,EAAoBqC,GAE3DA,EAAYH,EAAwB,CAClCrC,OACAsC,QACAE,YACAC,gBACAC,OAA2B,IAAnBgC,IAGVU,EAAiB5C,EAAUI,IAAIC,IAAkB,MAE7CC,EAMED,EANFC,cACAhC,EAKE+B,EALF/B,YACAmC,EAIEJ,EAJFI,uBACAD,EAGEH,EAHFG,YACA8C,EAEEjD,EAFFiD,gBACA5C,EACEL,EADFK,WAEF,IAAIgD,EAWJ,OAVIlB,IAEAkB,EADEJ,EACMd,EAAO,GAAGmB,MAAMvD,IAAIwD,GAAI,UAAOA,EAAKC,WAAZ,YAA0BD,EAAKF,QAASI,WAEhEtB,EAAO,GAAGmB,MACf7C,OAAO8C,GAA4B,iBAApBA,EAAKC,YACpBzD,IAAIwD,GAAI,UAAOA,EAAKC,WAAZ,YAA0BD,EAAKF,QACvCI,YAIL,wBAAI3F,IAAKmC,GACP,sCAAQhC,EAAYC,KAApB,YAA4BkC,IAC5B,4BAAKH,GACL,4BAAKE,GACL,4BAAKE,GACL,4BAAKgD,MAKb,OACE,yBAAKlF,UAAU,oBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,mDACA,wBAAIE,GAAG,gBAAgBF,UAAU,UAAUU,QAAS8C,KAAKI,yBACvD,8CACA,0BAAM5D,UAAW2D,EAAmB,mBAAqB,sBAE3D,4CACA,wBAAIzD,GAAG,aAAaF,UAAU,UAAUU,QAAS8C,KAAKM,sBACpD,oDACA,0BAAM9D,UAAWyB,EAAgB,mBAAqB,sBAExD,8CAGJ,+BAAQ2C,MAclBjB,EAAUxC,aAAe,CACvBsD,WAAW,EACXC,UAAU,GAGGf,Q,wBC3Jf,IAAIoC,GAAc,EAqClB,MAAMC,EAAMC,IAAMC,OAAO,CACvBC,QArCc,iDAsCdC,QAAS,IACTC,aAAc,OACdC,iBAAiBC,GACRC,IAAGC,UAAUF,EAAQ,CAAEG,SAAS,MAmB3CV,EAAIW,aAAaC,SAASC,IACxBD,GAzCF,SAAmBA,GACjB,OAAwB,MAApBA,EAASrF,OAOJqF,EAAStF,KAEX0C,KAAK8C,WAAWF,EAAStF,KAAKyF,UA+BzBC,CAAUC,uBAAaL,IACnCM,IAGE,OAFAC,QAAQC,KAAK,eAAgBF,EAAMN,UAE/BM,EAAMN,UACsB,MAA1BM,EAAMN,SAASrF,OACZwE,GACHsB,IAAK,CACH1G,KAAM,QACN2G,MAAO,iCACPC,mBAAmB,EACnBC,iBAAiB,EACjBC,QAAS,KACP1B,GAAc,KAIe,MAA1BmB,EAAMN,SAASrF,SACnBwE,GACHsB,IAAK,CACH1G,KAAM,QACN2G,MAAO,+DACPC,mBAAmB,EACnBC,iBAAiB,EACjBC,QAAS,KACP1B,GAAc,OAhFRgB,EAqFIG,EAAMN,SAAStF,MAlF/ByF,aAAoBW,MACfC,QAAQC,OAAO,CAAEb,aAEnBY,QAAQC,OAAO,CAAEb,SAAU,CAACA,KAE9BY,QAAQC,OAAO,CAAEb,SAAU,CAAC,mBA+E1BY,QAAQC,OAAOV,GAvF1B,IAAoBH,IA2FLf,Q,0CC3Ff,IAAID,GAAc,EAEH8B,UAAS,CACtBpI,SAAU,CACRqI,IAAK,WACLC,QAVgB,CAClBC,QAAS,CACP,eAAgB,wBAuBjBnB,IAAI,kBAAmB,CAACoB,EAAK3G,KAC5B,GAAI2G,EACFd,QAAQe,IAAID,GACO,MAAfA,EAAI1G,OACDwE,GACHsB,IAAK,CACH1G,KAAM,QACN2G,MAAO,iCACPC,mBAAmB,EACnBC,iBAAiB,EACjBC,QAAS,KACP1B,GAAc,MAII,MAAfkC,EAAI1G,QAAkB0G,KAC1BlC,GACHsB,IAAK,CACH1G,KAAM,QACN2G,MAAO,+DACPC,mBAAmB,EACnBC,iBAAiB,EACjBC,QAAS,KACP1B,GAAc,WAKjB,GAAIzE,GACLA,GAAQA,EAAKsB,OAAS,EACxB,MAAO,CAAErB,OAAQ,EAAGC,OAAQyF,uBAAa3F,IAG7C,MAAO,CAAEC,OAAQ,KAElBsF,IAAI,UAAW,CAACiB,EAAKvB,EAAQ4B,KAIrB,CAAEH,QAHO,CACd,eAAgB,uBAInBnB,IAAI,QAASuB,IAAaC,QAC1BxB,IAAI,UApES,kD,MCUhB,MAAMyB,UAAY1E,YAChBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CACXQ,WAAW,EACXC,UAAU,EACVlF,KAAMqB,MAASC,OAAO,cACtBpB,cAAe,GACfC,mBAAoB,GACpBgF,eAAgB,GAChB4D,WAAY,GACZzG,MAAO,GACP0C,OAAQ,IAEVR,KAAKpE,kBAAoBoE,KAAKpE,kBAAkB4I,KAAKxE,MACrDA,KAAKyE,OAASzE,KAAKyE,OAAOD,KAAKxE,MAC/BA,KAAKnE,aAAe,KAAO,MAAD,EACsBmE,KAAKC,MAA3CvE,EADgB,EAChBA,cAAeC,EADC,EACDA,mBACvBqE,KAAKK,SACH,CACE3E,cAAeC,EACfA,mBAAoBD,GAEtBsE,KAAKyE,SAKXC,qBAEEC,EADqB3E,KAAKF,MAAlB6E,UAENC,EAASC,QAAQpJ,SAASqJ,KAAK,KAAO,MAE9BC,EAAoB3H,EADL4C,KAAKF,MAAlBrE,UAEJsJ,GACF/E,KAAKK,SACH,CACE3E,cAAeqJ,EAAkB,GAAG3I,UACpCT,mBAAoBoJ,EAAkB,IAAI3I,WAE5C,KACE4D,KAAKyE,cAQjB7I,kBAAkBoJ,GAChB,MAAMtH,EAAIsC,KADa,EAInBgF,EADFC,OAAUtI,EAHW,EAGXA,KAAMF,EAHK,EAGLA,KAAMyI,EAHD,EAGCA,QAAS7I,EAHV,EAGUA,MAHV,EAKuB2D,KAAKC,MAA3CvE,EALe,EAKfA,cAAeC,EALA,EAKAA,mBACvBqJ,EAAMG,iBAEM,kBAAT1I,GAAqC,uBAATA,GACnB,kBAATA,GAA4BJ,IAAUV,GAC7B,uBAATc,GAAiCJ,IAAUX,EAE5CsE,KAAKK,SACH,CACEK,UAAU,EACV,CAACjE,GAAgB,aAATE,EAAsBuI,EAAU7I,GAE1CqB,EAAE+G,QAGJW,IAAK,CACHzI,KAAM,OACN0I,MAAO,IACP/B,MAAO,mDACPC,mBAAmB,EACnBC,iBAAiB,IAKvBiB,SAAU,MAAD,EAC6CzE,KAAKC,MAAjDvE,EADD,EACCA,cAAeC,EADhB,EACgBA,mBAAoBH,EADpC,EACoCA,KAC3CwE,KAAKK,SACH,CACEI,WAAW,EACXC,UAAU,GAEZ,KACEuB,IACGqD,IAAI,CACHtD,EAAIuD,IAAJ,mCAAoC7J,IACpCsG,EAAIuD,IAAJ,kBAAmB7J,EAAnB,eAAuCC,IACvCqG,EAAIuD,IAAJ,6BAA8B7J,EAA9B,eAAkDC,EAAlD,YAAwEH,MAEzEgK,KACCvD,IAAMwD,OAAO,CAACC,EAAKlF,EAAQ1C,KACzB,IAAI6H,EAAa,GACbD,EAAI/E,gBAAkB+E,EAAI/E,eAAe/B,SAC3C+G,EAAaC,KAAKC,MAAMD,KAAKnD,UAAUiD,KAEzC1F,KAAKK,SAAL,2BACKsF,GADL,IAEEnF,OAAQA,GAAU,GAClB1C,MAAOA,GAAS,GAChB2C,WAAW,UAQzBF,SAAU,MACA9E,EAAauE,KAAKF,MAAlBrE,SADD,EAYHuE,KAAKC,MATPzE,EAHK,EAGLA,KACAsC,EAJK,EAILA,MACA0C,EALK,EAKLA,OACA9E,EANK,EAMLA,cACAC,EAPK,EAOLA,mBACA4I,EARK,EAQLA,WACA9D,EATK,EASLA,UACAC,EAVK,EAULA,SACAC,EAXK,EAWLA,eAGF,OACE,oCACE,yBAAKnE,UAAU,iBACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CACEhB,KAAMA,EACNC,SAAU2B,EAAa3B,IAAa,GACpCC,cAAeA,EACfC,mBAAoBA,EACpBC,kBAAmBoE,KAAKpE,kBACxBC,aAAcmE,KAAKnE,gBAGvB,yBAAKW,UAAU,uBACb,yBAAKA,UAAU,+BACb,wBAAIE,GAAG,SAAP,4BACA,kBAAC,EAAD,CACE+D,UAAWA,EACXC,SAAUA,EACVlF,KAAMA,EACNsC,MAAOA,EACP0C,OAAQA,EACR7E,mBAAoBA,EACpBgF,eAAgBA,KAGpB,yBAAKnE,UAAU,mDACb,kBAAC,EAAD,CACEhB,KAAMA,EACNC,SAAU2B,EAAa3B,IAAa,GACpCC,cAAeA,EACfC,mBAAoBA,EACpBC,kBAAmBoE,KAAKpE,kBACxBC,aAAcmE,KAAKnE,kBAK3B,yBAAKW,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2BACb,uBAAGA,UAAU,6BACb,kEAAgBK,IAAO0H,GAAYzH,OAAO,yBAC1C,kCAkBCgJ,kBATS7F,IAAK,CAC3BxE,SAAUwE,EAAMxE,WAQHqK,CAAyBxB,GC9LxC,MAAMyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCJ,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,KAAMmB,IACLA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACA,cAA3BF,EAAiB5G,QACfuG,UAAUC,cAAcO,YAK1B7D,QAAQe,IAAI,6IAERqC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBxD,QAAQe,IAAI,sCAGRqC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAOjE,IACNC,QAAQD,MAAM,4CAA6CA,KCjFjE,MAAMkE,EAAUC,YAAgBzC,EAAS0C,UACnCC,EAAQC,YACZJ,EACAK,YAEMC,YAAgBC,OAKxBC,IAASrH,OACP,kBAAC,IAAD,CAAUgH,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDJnB,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,YAAwB/B,OAAOC,SAAS+B,MACpDC,SAAWjC,OAAOC,SAASgC,OAIvC,OAGFjC,OAAOkC,iBAAiB,OAAQ,KAC9B,MAAM7B,EAAK,UAAM0B,YAAN,sBAEPjC,IA6DV,SAAiCO,EAAOC,GAEtClC,MAAMiC,GACHd,KAAM5C,IAEL,MAAMwF,EAAcxF,EAASoB,QAAQuB,IAAI,gBAEnB,MAApB3C,EAASrF,QACO,MAAf6K,IAA8D,IAAvCA,EAAYC,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM9C,KAAMmB,IAClCA,EAAa4B,aAAa/C,KAAK,KAC7BS,OAAOC,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1BY,MAAM,KACLhE,QAAQe,IACN,mEAlFAuE,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM9C,KAAK,KACjCrC,QAAQe,IACN,+GAMJmC,EAAgBC,EAAOC,MClB/BE,K","file":"static/js/main.247ab921.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport 'date-input-polyfill';\n\nfunction PickerDateAndPlace({\n  date,\n  stations,\n  originStation,\n  destinationStation,\n  handleInputChange,\n  swapLocation,\n}) {\n  const optionOriginStations = [];\n  const optionDestinationStations = [];\n  if (stations) {\n    stations.forEach(station => {\n      optionOriginStations.push(\n        <option key={`originStation${station.stationID}`} value={station.stationID}>\n          {station.stationName.zhTw}\n        </option>,\n      );\n      optionDestinationStations.push(\n        <option key={`destinationStation${station.stationID}`} value={station.stationID}>\n          {station.stationName.zhTw}\n        </option>,\n      );\n    });\n  }\n  return (\n    <div className=\"control\">\n      <div className=\"form-group\">\n        <span>日期:</span>\n        <input\n          name=\"date\"\n          id=\"date\"\n          type=\"date\"\n          min={moment().format('YYYY-MM-DD')}\n          max={moment()\n            .add(8, 'month')\n            .format('YYYY-MM-DD')}\n          value={date}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=\"form-group\">\n        <span>起點:</span>\n        <select\n          name=\"originStation\"\n          id=\"originStation\"\n          value={originStation}\n          onChange={handleInputChange}\n        >\n          {optionOriginStations}\n        </select>\n      </div>\n      <div className=\"form-group\">\n        <button id=\"swapLocation\" type=\"button\" className=\"control__swap\" onClick={swapLocation}>\n          <span className=\"glyphicon glyphicon-sort\" />\n        </button>\n      </div>\n      <div className=\"form-group\">\n        <span>終點:</span>\n        <select\n          name=\"destinationStation\"\n          id=\"destinationStation\"\n          value={destinationStation}\n          onChange={handleInputChange}\n        >\n          {optionDestinationStations}\n        </select>\n      </div>\n    </div>\n  );\n}\n\nPickerDateAndPlace.propTypes = {\n  originStation: PropTypes.string,\n  destinationStation: PropTypes.string,\n};\n\nPickerDateAndPlace.defaultProps = {\n  originStation: '1030',\n  destinationStation: '1060',\n};\n\nexport default PickerDateAndPlace;\n","import moment from 'moment';\n\nfunction validateData(reduxStatus) {\n  if (reduxStatus && reduxStatus.data.status && reduxStatus.data.result) {\n    return reduxStatus.data.result;\n  }\n  return 0;\n}\n\nfunction minutesOfDay(m) {\n  return m.minutes() + m.hours() * 60;\n}\n\nfunction getItemsWithDepartureTimeAfterNow(data) {\n  const { date, finalData: originalItems, departureTimeDSC, active } = data;\n  const finalItems = originalItems.filter(\n    item => moment(`${date} ${item.departureTime}`).unix() > moment().unix(),\n  );\n  if (active) {\n    if (departureTimeDSC) {\n      return finalItems.sort(\n        (a, b) =>\n          minutesOfDay(moment(`${date} ${a.departureTime}`)) -\n          minutesOfDay(moment(`${date} ${b.departureTime}`)),\n      );\n    }\n    return finalItems.sort(\n      (b, a) =>\n        minutesOfDay(moment(`${date} ${a.departureTime}`)) -\n        minutesOfDay(moment(`${date} ${b.departureTime}`)),\n    );\n  }\n  return finalItems;\n}\n\nfunction getItemsWithAvailableSeats(destinationStation, originalItems) {\n  return originalItems.filter(item => {\n    const { stopStations } = item;\n    const indexItem = stopStations.findIndex(\n      stopStation => stopStation.stationID === destinationStation,\n    );\n    if (indexItem >= 0) {\n      item.hasStandardSeat = stopStations[indexItem].standardSeatStatus !== 'Full';\n      return (\n        stopStations[indexItem].standardSeatStatus !== 'Full' ||\n        stopStations[indexItem].businessSeatStatus !== 'Full'\n      );\n    }\n    return [];\n  });\n}\n\nfunction getDestinationInfo(trainNo, times) {\n  const nowInfo = times.filter(item => item.dailyTrainInfo.trainNo === trainNo);\n  if (nowInfo[0]) {\n    return nowInfo[0].destinationStopTime;\n  }\n  return false;\n}\n\nfunction getTravelTime(date, start, end) {\n  const result = moment\n    .utc(\n      moment(`${date} ${end}`, 'YYYY-MM-DD HH:mm').diff(\n        moment(`${date} ${start}`, 'YYYY-MM-DD HH:mm:ss'),\n      ),\n    )\n    .format('HH:mm');\n  return result;\n}\n\nfunction getItemsWithTravelTimes(data) {\n  const { date, times, finalData: originalItems, travelTimeDSC, active } = data;\n  const finalItems = originalItems\n    .map(availableSeat => {\n      const { departureTime, trainNo } = availableSeat;\n      let destinationInfo = {};\n      let arrivalTime;\n      let destinationStationName;\n      let travelTime;\n      if (times && times.length) {\n        destinationInfo = getDestinationInfo(trainNo, times);\n        if (destinationInfo) {\n          arrivalTime = destinationInfo.arrivalTime;\n          destinationStationName = destinationInfo.stationName.zhTw;\n        }\n      }\n\n      if (departureTime && arrivalTime) {\n        travelTime = getTravelTime(date, departureTime, arrivalTime);\n      }\n      return {\n        ...availableSeat,\n        destinationStationName,\n        arrivalTime,\n        travelTime,\n      };\n    })\n    .filter(item => item.arrivalTime);\n  if (active) {\n    if (travelTimeDSC) {\n      return finalItems.sort(\n        (b, a) =>\n          minutesOfDay(moment(`${date} ${a.travelTime}`)) -\n          minutesOfDay(moment(`${date} ${b.travelTime}`)),\n      );\n    }\n    return finalItems.sort(\n      (a, b) =>\n        minutesOfDay(moment(`${date} ${a.travelTime}`)) -\n        minutesOfDay(moment(`${date} ${b.travelTime}`)),\n    );\n  }\n  return finalItems;\n}\n\nexport {\n  validateData,\n  getItemsWithDepartureTimeAfterNow,\n  getItemsWithAvailableSeats,\n  getDestinationInfo,\n  getTravelTime,\n  getItemsWithTravelTimes,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  getItemsWithDepartureTimeAfterNow,\n  getItemsWithAvailableSeats,\n  getItemsWithTravelTimes,\n} from '../util/util';\n\nclass RailTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortActiveMode: 0,\n      departureTimeDSC: true,\n      travelTimeDSC: true,\n    };\n    this.toggleSortDepartureTime = () => {\n      const { departureTimeDSC } = this.state;\n      this.setState({\n        departureTimeDSC: !departureTimeDSC,\n        sortActiveMode: 0,\n      });\n    };\n    this.toggleSortTravelTime = () => {\n      const { travelTimeDSC } = this.state;\n      this.setState({\n        travelTimeDSC: !travelTimeDSC,\n        sortActiveMode: 1,\n      });\n    };\n  }\n\n  render() {\n    const {\n      date,\n      times,\n      prices,\n      isLoading,\n      isSubmit,\n      // originStation,\n      destinationStation,\n      availableSeats,\n    } = this.props;\n    const { departureTimeDSC, travelTimeDSC, sortActiveMode } = this.state;\n    let blockTableRows;\n    if (isLoading && isSubmit) {\n      blockTableRows = (\n        <tr id=\"row-searching\">\n          <td colSpan=\"6\" style={{ textAlign: 'center' }}>\n            查詢中\n          </td>\n        </tr>\n      );\n    } else if (!isLoading && isSubmit) {\n      blockTableRows = (\n        <tr id=\"row-nodata\">\n          <td colSpan=\"6\" style={{ textAlign: 'center' }}>\n            無座位可販售\n          </td>\n        </tr>\n      );\n    } else {\n      blockTableRows = (\n        <tr>\n          <td colSpan=\"6\" style={{ textAlign: 'center' }}>\n            條件已變更請重新送出查詢\n          </td>\n        </tr>\n      );\n    }\n\n    if (availableSeats && availableSeats.length && !isLoading && isSubmit) {\n      // 先過濾資料，升序降序\n      let finalData = availableSeats;\n      finalData = getItemsWithDepartureTimeAfterNow({\n        date,\n        finalData,\n        departureTimeDSC,\n        active: sortActiveMode === 0,\n      });\n      // console.log(finalData);\n      finalData = getItemsWithAvailableSeats(destinationStation, finalData);\n      // console.log(destinationStation, finalData);\n      finalData = getItemsWithTravelTimes({\n        date,\n        times,\n        finalData,\n        travelTimeDSC,\n        active: sortActiveMode === 1,\n      });\n\n      blockTableRows = finalData.map(availableSeat => {\n        const {\n          departureTime,\n          stationName,\n          destinationStationName,\n          arrivalTime,\n          hasStandardSeat,\n          travelTime,\n        } = availableSeat;\n        let price;\n        if (prices) {\n          if (hasStandardSeat) {\n            price = prices[0].fares.map(fare => `${fare.ticketType}:${fare.price}`).toString();\n          } else {\n            price = prices[0].fares\n              .filter(fare => fare.ticketType !== '標準')\n              .map(fare => `${fare.ticketType}:${fare.price}`)\n              .toString();\n          }\n        }\n        return (\n          <tr key={departureTime}>\n            <td>{`${stationName.zhTw}|${destinationStationName}`}</td>\n            <td>{departureTime}</td>\n            <td>{arrivalTime}</td>\n            <td>{travelTime}</td>\n            <td>{price}</td>\n          </tr>\n        );\n      });\n    }\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>起|終點</th>\n              <th id=\"departureTime\" className=\"pointer\" onClick={this.toggleSortDepartureTime}>\n                <span>發車</span>\n                <span className={departureTimeDSC ? 'arrow arrow--asc' : 'arrow arrow--dsc'} />\n              </th>\n              <th>到達</th>\n              <th id=\"travelTime\" className=\"pointer\" onClick={this.toggleSortTravelTime}>\n                <span>總時間</span>\n                <span className={travelTimeDSC ? 'arrow arrow--dsc' : 'arrow arrow--asc'} />\n              </th>\n              <th>票價</th>\n            </tr>\n          </thead>\n          <tbody>{blockTableRows}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nRailTable.propTypes = {\n  availableSeats: PropTypes.array,\n  prices: PropTypes.array,\n  isLoading: PropTypes.bool,\n  isSubmit: PropTypes.bool,\n};\n\nRailTable.defaultProps = {\n  isLoading: true,\n  isSubmit: true,\n};\n\nexport default RailTable;\n","import axios from 'axios';\nimport qs from 'qs';\nimport Swal from 'sweetalert2';\nimport { camelizeKeys } from 'humps';\n\nlet isModalOpen = false;\nconst API_URL = 'https://ptx.transportdata.tw/MOTC/v2/Rail/THSR';\n\n/**\n *\n * parse error response\n */\nfunction parseError(messages) {\n  // error\n  if (messages) {\n    if (messages instanceof Array) {\n      return Promise.reject({ messages });\n    }\n    return Promise.reject({ messages: [messages] });\n  }\n  return Promise.reject({ messages: ['錯誤'] });\n}\n\n/**\n * parse response\n */\nfunction parseBody(response) {\n  if (response.status === 200) {\n    if (process.env.NODE_ENV === 'development') {\n      console.log({\n        url: response.config.url,\n        result: response.data\n      });\n    }\n    return response.data;\n  }\n  return this.parseError(response.data.messages);\n}\n\n/**\n * axios instance\n */\nconst API = axios.create({\n  baseURL: API_URL,\n  timeout: 8000,\n  responseType: 'json',\n  paramsSerializer(params) {\n    return qs.stringify(params, { indices: false });\n  }\n});\n\n// API.interceptors.request.use(\n//   (config) => {\n//     return config;\n//   },\n//   (error) => {\n//     console.warn('Error status', error.response);\n//     // return Promise.reject(error)\n//     if (error.response) {\n//       return parseError(error.response.data);\n//     }\n//     return Promise.reject(error);\n//   },\n// );\n\n// response parse\nAPI.interceptors.response.use(\n  response => parseBody(camelizeKeys(response)),\n  error => {\n    console.warn('Error status', error.response);\n    // return Promise.reject(error)\n    if (error.response) {\n      if (error.response.status === 403) {\n        if (!isModalOpen) {\n          Swal({\n            type: 'error',\n            title: '請更換日期',\n            showConfirmButton: false,\n            showCloseButton: true,\n            onClose: () => {\n              isModalOpen = false;\n            }\n          });\n        }\n      } else if (error.response.status === 500) {\n        if (!isModalOpen) {\n          Swal({\n            type: 'error',\n            title: '連線或伺服器發生錯誤',\n            showConfirmButton: false,\n            showCloseButton: true,\n            onClose: () => {\n              isModalOpen = false;\n            }\n          });\n        }\n      }\n      return parseError(error.response.data);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default API;\n","import 'isomorphic-fetch';\nimport { camelizeKeys } from 'humps';\nimport reduxApi from 'redux-api';\nimport Swal from 'sweetalert2';\nimport adapterFetch from 'redux-api/lib/adapters/fetch';\n\nconst API_URL = 'https://ptx.transportdata.tw/MOTC/v2/Rail/THSR';\nconst jsonOptions = {\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\nlet isModalOpen = false;\n// redux-api documentation: https://github.com/lexich/redux-api/blob/master/docs/DOCS.md\nexport default reduxApi({\n  stations: {\n    url: '/Station',\n    options: jsonOptions,\n  },\n  // availableSeats: {\n  //   url: '/AvailableSeatStatusList/:stationId',\n  //   options: jsonOptions,\n  // },\n  // prices: {\n  //   url: '/ODFare/:originStationId/to/:destinationStationID',\n  //   options: jsonOptions,\n  // },\n  // times: {\n  //   url: '/DailyTimetable/OD/:originStationId/to/:destinationStationID/:date',\n  //   options: jsonOptions,\n  // }\n})\n  .use('responseHandler', (err, data) => {\n    if (err) {\n      console.log(err);\n      if (err.status === 403) {\n        if (!isModalOpen) {\n          Swal({\n            type: 'error',\n            title: '請更換日期',\n            showConfirmButton: false,\n            showCloseButton: true,\n            onClose: () => {\n              isModalOpen = false;\n            },\n          });\n        }\n      } else if (err.status === 500 || err) {\n        if (!isModalOpen) {\n          Swal({\n            type: 'error',\n            title: '連線或伺服器發生錯誤',\n            showConfirmButton: false,\n            showCloseButton: true,\n            onClose: () => {\n              isModalOpen = false;\n            },\n          });\n        }\n      }\n    } else if (data) {\n      if (data && data.length > 0) {\n        return { status: 1, result: camelizeKeys(data) };\n      }\n    }\n    return { status: 0 };\n  })\n  .use('options', (url, params, getState) => {\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n    return { headers };\n  })\n  .use('fetch', adapterFetch(fetch))\n  .use('rootUrl', API_URL);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert2';\nimport moment from 'moment';\n\nimport PickerDateAndPlace from '../components/PickerDateAndPlace';\nimport RailTable from '../components/RailTable';\n\nimport API from '../middleware/API';\nimport reduxAPI from '../middleware/reduxAPI';\n\nimport '../styles/App.scss';\nimport { validateData } from '../util/util';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      isSubmit: false,\n      date: moment().format('YYYY-MM-DD'),\n      originStation: '',\n      destinationStation: '',\n      availableSeats: [],\n      updateTime: '',\n      times: [],\n      prices: [],\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.submit = this.submit.bind(this);\n    this.swapLocation = () => {\n      const { originStation, destinationStation } = this.state;\n      this.setState(\n        {\n          originStation: destinationStation,\n          destinationStation: originStation,\n        },\n        this.submit,\n      );\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(\n      reduxAPI.actions.stations.sync(() => {\n        const { stations } = this.props;\n        const validatedStations = validateData(stations);\n        if (validatedStations) {\n          this.setState(\n            {\n              originStation: validatedStations[4].stationID,\n              destinationStation: validatedStations[10].stationID,\n            },\n            () => {\n              this.submit();\n            },\n          );\n        }\n      }),\n    );\n  }\n\n  handleInputChange(event) {\n    const m = this;\n    const {\n      target: { type, name, checked, value },\n    } = event;\n    const { originStation, destinationStation } = this.state;\n    event.preventDefault();\n    if (\n      (name !== 'originStation' && name !== 'destinationStation') ||\n      (name === 'originStation' && value !== destinationStation) ||\n      (name === 'destinationStation' && value !== originStation)\n    ) {\n      this.setState(\n        {\n          isSubmit: false,\n          [name]: type === 'checkbox' ? checked : value,\n        },\n        m.submit,\n      );\n    } else {\n      swal({\n        type: 'info',\n        timer: 1000,\n        title: '起點和終點需不同',\n        showConfirmButton: false,\n        showCloseButton: true,\n      });\n    }\n  }\n\n  submit() {\n    const { originStation, destinationStation, date } = this.state;\n    this.setState(\n      {\n        isLoading: true,\n        isSubmit: true,\n      },\n      () => {\n        axios\n          .all([\n            API.get(`/AvailableSeatStatusList/${originStation}`),\n            API.get(`/ODFare/${originStation}/to/${destinationStation}`),\n            API.get(`/DailyTimetable/OD/${originStation}/to/${destinationStation}/${date}`),\n          ])\n          .then(\n            axios.spread((res, prices, times) => {\n              let finalState = {};\n              if (res.availableSeats && res.availableSeats.length) {\n                finalState = JSON.parse(JSON.stringify(res));\n              }\n              this.setState({\n                ...finalState,\n                prices: prices || [],\n                times: times || [],\n                isLoading: false,\n              });\n            }),\n          );\n      },\n    );\n  }\n\n  render() {\n    const { stations } = this.props;\n    const {\n      date,\n      times,\n      prices,\n      originStation,\n      destinationStation,\n      updateTime,\n      isLoading,\n      isSubmit,\n      availableSeats,\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"App container\">\n          <div className=\"sticky desktop--hide\">\n            <PickerDateAndPlace\n              date={date}\n              stations={validateData(stations) || []}\n              originStation={originStation}\n              destinationStation={destinationStation}\n              handleInputChange={this.handleInputChange}\n              swapLocation={this.swapLocation}\n            />\n          </div>\n          <div className=\"row content--mobile\">\n            <div className=\"col-md-8 col-sm-7 col-xs-12\">\n              <h2 id=\"title\">高鐵查詢</h2>\n              <RailTable\n                isLoading={isLoading}\n                isSubmit={isSubmit}\n                date={date}\n                times={times}\n                prices={prices}\n                destinationStation={destinationStation}\n                availableSeats={availableSeats}\n              />\n            </div>\n            <div className=\"col-md-4 col-sm-5 col-xs-12 sticky mobile--hide\">\n              <PickerDateAndPlace\n                date={date}\n                stations={validateData(stations) || []}\n                originStation={originStation}\n                destinationStation={destinationStation}\n                handleInputChange={this.handleInputChange}\n                swapLocation={this.swapLocation}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-12 center footer\">\n              <i className=\"glyphicon glyphicon-time\" />\n              <span>{` 更新時間:${moment(updateTime).format('YYYY-MM-DD HH:mm:ss')}`}</span>\n              <br />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  stations: state.stations,\n});\n\nApp.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  // stations: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // const result = window.confirm('網頁版本更新');\n              console.log('網頁版本更新，請關閉相關視窗後重新開啟 http://bit.ly/CRA-PWA.');\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reduxAPI from './middleware/reduxAPI'; // our redux-rest object\n\nconst reducer = combineReducers(reduxAPI.reducers);\nconst store = createStore(\n  reducer,\n  compose(\n    process.env.NODE_ENV === 'production'\n      ? applyMiddleware(thunk)\n      : applyMiddleware(thunk, createLogger()),\n  ),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}